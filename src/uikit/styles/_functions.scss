/*
 * Darkens a map of colors by the given percentage, returning the new map
 */
 @function darkened-palette($palette, $modifier) {
  $new-palette: ();

  @each $name, $color in $palette {
    $new-palette: map-merge($new-palette, (
      $name: darken($color, $modifier)
    ));
  }

  @return $new-palette;
}

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

/*
 * Lightens a map of colors by the given percentage, returning the new map
 */
@function lightened-palette($palette, $modifier) {
  $new-palette: ();

  @each $name, $color in $palette {
    $new-palette: map-merge($new-palette, (
      $name: lighten($color, $modifier)
    ));
  }

  @return $new-palette;
}

// str-replace() - Replace in a string
//
// @param {string}  $string    String that you want to replace
// @param {string}  $substr    String that is to be replaced by `$newsubstr`
// @param {string}  $newsubstr String that replaces `$substr`
// @param {number*} $all       Flag for replaceing all (1+) or not (0)
// @return {string}
@function str-replace($string, $substr, $newsubstr, $all: 1) {
  $position-found: str-index($string, $substr);
  $processed: ();

  @while ($position-found and $position-found > 0) {
    $length-substr: str-length($substr);
    @if (1 != $position-found) {
      $processed: append($processed, str-slice($string, 0, $position-found - 1));
    }
    $processed: append($processed, $newsubstr);
    $string: str-slice($string, $position-found + $length-substr);

    $position-found: 0;

    @if ($all > 0) {
      $position-found: str-index($string, $substr);
    }
  }

  $processed: append($processed, $string);
  $string: "";

  @each $s in $processed {
    $string: #{$string}#{$s};
  }

  @return $string;
}